openapi: 3.1.0
info:
  title: Malloy Publisher - Semantic Model Serving API
  description:
    The Malloy Publisher - Semantic Model Serving API serves Malloy packages.  A Malloy package is a directory of Malloy models (.malloy files),
    Malloy notebooks (.malloynb files), and embedded datbases (.parque files) with a malloy-publisher.json manifest at the package's root directory.
    For example, see the Malloy samples packages (https://github.com/malloydata/malloy-samples) repo.
  version: v0
servers:
  - url: /api/v0/

paths:
  /status:
    get:
      tags:
      - publisher
      operationId: get-status
      summary: Server status
      responses:
        '200':
          description: Returns server status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerStatus'

  /connections/test:
    post:
      tags:
        - connections
      operationId: test-connection-configuration
      summary: Test a connection configuration before adding it to the project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connection'
      responses:
        "200":
          description: Connection test result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionStatus'
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects:
    get:
      tags:
        - projects
      operationId: list-projects
      summary: Returns a list of the Projects hosted on this server.
      responses:
        "200":
          description: A list of the Projects names.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - projects
      operationId: create-project
      summary: Creates a new project.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/Project'
      responses:
        "200":
          description: Returns the project created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{projectName}:
    get:
      tags:
        - projects
      operationId: get-project
      summary: Returns metadata about the project.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: reload
          in: query
          description: Load / reload the project before returning result
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Metadata about the project.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - projects
      operationId: update-project
      summary: Updates a project.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/Project'
      responses:
        "200":
          description: Returns the project updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - projects
      operationId: delete-project
      summary: Deletes a project.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns the project deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{projectName}/connections:
    get:
      tags:
        - connections
      operationId: list-connections
      summary: Returns a list of the connections in the project.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of the connections in the project.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Connection"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{projectName}/connections/{connectionName}:
    get:
      tags:
        - connections
      operationId: get-connection
      summary: Returns a connection.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: connectionName
          in: path
          description: Name of connection
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A connection.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"


  /projects/{projectName}/connections/{connectionName}/test:
    get:
      tags:
        - connections
      operationId: test-connection
      summary: Returns a test.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: connectionName
          in: path
          description: Name of connection
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionStatus'
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{projectName}/connections/{connectionName}/sqlSource:
    get:
      tags:
        - connections
      operationId: get-sqlsource
      deprecated: true
      summary: Returns a SQL source.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: connectionName
          in: path
          description: Name of connection
          required: true
          schema:
            type: string
        - name: sqlStatement
          in: query
          description: SQL statement
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A SQL source.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlSource"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - connections
      operationId: post-sqlsource
      deprecated: true
      summary: Returns a SQL source.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: connectionName
          in: path
          description: Name of connection
          required: true
          schema:
            type: string
      requestBody:
        description: SQL statement to fetch the SQL source
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sqlStatement:
                  type: string
      responses:
        "200":
          description: A SQL source.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlSource"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{projectName}/connections/{connectionName}/tableSource:
    get:
      tags:
        - connections
      operationId: get-tablesource
      summary: Returns a table source.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: connectionName
          in: path
          description: Name of connection
          required: true
          schema:
            type: string
        - name: tableKey
          in: query
          description: Table key
          required: false
          schema:
            type: string
        - name: tablePath
          in: query
          description: Table path
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A table source.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableSource"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{projectName}/connections/{connectionName}/schemas/{schemaName}/tables:
    get:
      tags:
        - connections
      operationId: list-tables
      summary: Returns a list of tables available in the specified schema.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: connectionName
          in: path
          description: Name of connection
          required: true
          schema:
            type: string
        - name: schemaName
          in: path
          description: Name of schema
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of table names available in the specified schema.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{projectName}/connections/{connectionName}/schemas:
    get:
      tags:
        - connections
      operationId: list-schemas
      summary: Returns a list of schemas available in the connection.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: connectionName
          in: path
          description: Name of connection
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of schemas available in the connection with metadata.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SchemaName"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{projectName}/connections/{connectionName}/queryData:
    get:
      tags:
        - connections
      operationId: get-querydata
      deprecated: true
      summary: Returns a query and its results.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: connectionName
          in: path
          description: Name of connection
          required: true
          schema:
            type: string
        - name: sqlStatement
          in: query
          description: SQL statement
          required: false
          schema:
            type: string
        - name: options
          in: query
          description: Options
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A query and its results.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryData"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
              $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - connections
      operationId: post-querydata
      summary: Returns a query and its results.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: connectionName
          in: path
          description: Name of connection
          required: true
          schema:
            type: string
        - name: options
          in: query
          description: Options
          required: false
          schema:
            type: string
      requestBody:
        description: SQL statement to execute
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sqlStatement:
                  type: string
      responses:
        "200":
          description: A query and its results.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryData"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{projectName}/connections/{connectionName}/temporaryTable:
    get:
      tags:
        - connections
      operationId: get-temporarytable
      deprecated: true
      summary: Returns a temporary table.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: connectionName
          in: path
          description: Name of connection
          required: true
          schema:
            type: string
        - name: sqlStatement
          in: query
          description: SQL statement
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A temporary table.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemporaryTable"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - connections
      operationId: post-temporarytable
      summary: Returns a temporary table.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: connectionName
          in: path
          description: Name of connection
          required: true
          schema:
            type: string
      requestBody:
        description: SQL statement to create the temporary table
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sqlStatement:
                  type: string
      responses:
        "200":
          description: A temporary table.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemporaryTable"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"


  /projects/{projectName}/packages:
    get:
      tags:
        - packages
      operationId: list-packages
      summary: Returns a list of the Packages hosted on this server.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of the Packages names.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Package"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "501":
          $ref: "#/components/responses/NotImplementedError"
    post:
      tags:
        - packages
      operationId: create-package
      summary: Creates a new package.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/Package'
      responses:
        "200":
          description: Returns the package created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Package"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "501":
          $ref: "#/components/responses/NotImplementedError"

  /projects/{projectName}/packages/{packageName}:
    get:
      tags:
        - packages
      operationId: get-package
      summary: Returns the package metadata.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: packageName
          in: path
          description: Package name
          required: true
          schema:
            type: string
        - name: versionId
          in: query
          description: Version ID
          required: false
          schema:
            type: string
        - name: reload
          in: query
          description: Load / reload the package before returning result
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Package metadata.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Package"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "501":
          $ref: "#/components/responses/NotImplementedError"
    patch:
      tags:
        - packages
      operationId: update-package
      summary: Updates a package.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: packageName
          in: path
          description: Name of package
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/Package'
      responses:
        "200":
          description: Returns the package updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Package"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "501":
          $ref: "#/components/responses/NotImplementedError"
    delete:
      tags:
        - packages
      operationId: delete-package
      summary: Deletes a package.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: packageName
          in: path
          description: Name of package
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns the package deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Package"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "501":
          $ref: "#/components/responses/NotImplementedError"

  /projects/{projectName}/packages/{packageName}/models:
    get:
      tags:
        - models
      operationId: list-models
      summary: Returns a list of relative paths to the models in the package.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: packageName
          in: path
          description: Name of package
          required: true
          schema:
            type: string
        - name: versionId
          in: query
          description: Version ID
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A list of relative paths to the models in the package.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Model"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "501":
          $ref: "#/components/responses/NotImplementedError"

  /projects/{projectName}/packages/{packageName}/models/{path}:
    get:
      tags:
        - models
      operationId: get-model
      summary: Returns a Malloy model.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: packageName
          in: path
          description: Name of package.
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path to model wihin the package.
          required: true
          schema:
            type: string
        - name: versionId
          in: query
          description: Version ID
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A Malloy model.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/CompiledModel"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "424":
          $ref: "#/components/responses/ModelCompilationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "501":
          $ref: "#/components/responses/NotImplementedError"

  /projects/{projectName}/packages/{packageName}/notebooks:
    get:
      tags:
        - notebooks
      operationId: list-notebooks
      summary: Returns a list of relative paths to the notebooks in the package.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: packageName
          in: path
          description: Name of package
          required: true
          schema:
            type: string
        - name: versionId
          in: query
          description: Version ID
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A list of relative paths to the models in the package.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notebook"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "501":
          $ref: "#/components/responses/NotImplementedError"

  /projects/{projectName}/packages/{packageName}/notebooks/{path}:
    get:
      tags:
        - notebooks
      operationId: get-notebook
      summary: Returns a Malloy notebook.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: packageName
          in: path
          description: Name of package.
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path to notebook wihin the package.
          required: true
          schema:
            type: string
        - name: versionId
          in: query
          description: Version ID
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A Malloy notebook.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/CompiledNotebook"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "501":
          $ref: "#/components/responses/NotImplementedError"

  /projects/{projectName}/packages/{packageName}/queryResults/{path}:
    get:
      tags:
        - queryresults
      operationId: execute-query
      summary: Returns a query and its results.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: packageName
          in: path
          description: Name of package
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path to model within the package.
          required: true
          schema:
            type: string
        - in: query
          name: query
          description: Query string to execute on the model.  If the query is paramter is set, the queryName parameter must be empty.
          required: false
          schema:
            type: string
        - in: query
          name: sourceName
          description: Name of the source in the model to use for queryName, search, and topValue requests.
          required: false
          schema:
            type: string
        - in: query
          name: queryName
          description: Name of a query to execute on a source in the model.  Requires the sourceName parameter is set.  If the queryName is paramter is set, the query parameter must be empty.
          required: false
          schema:
            type: string
        - in: query
          name: versionId
          description: Version ID
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A query and its results.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/QueryResult"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "501":
          $ref: "#/components/responses/NotImplementedError"

  /projects/{projectName}/packages/{packageName}/databases:
    get:
      tags:
        - databases
      operationId: list-databases
      summary: Returns a list of relative paths to the databases embedded in the package.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: packageName
          in: path
          description: Name of package
          required: true
          schema:
            type: string
        - name: versionId
          in: query
          description: Version ID
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A list of relative paths to the databases embedded in the package.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Database"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "501":
          $ref: "#/components/responses/NotImplementedError"

  /projects/{projectName}/packages/{packageName}/schedules:
    get:
      tags:
        - schedules
      operationId: list-schedules
      summary: Returns a list of running schedules.
      parameters:
        - name: projectName
          in: path
          description: Name of project
          required: true
          schema:
            type: string
        - name: packageName
          in: path
          description: Name of package
          required: true
          schema:
            type: string
        - name: versionId
          in: query
          description: Version ID
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A list of running schedules.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Schedule"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "501":
          $ref: "#/components/responses/NotImplementedError"

  /watch-mode/status:
    get:
      tags:
        - watch-mode
      operationId: get-watch-status
      summary: Returns the current watch mode status.
      responses:
        "200":
          description: The current watch mode status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WatchStatus"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /watch-mode/start:
    post:
      tags:
        - watch-mode
      operationId: start-watching
      summary: Starts watching a project for file changes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartWatchRequest"
      responses:
        "200":
          description: Watch mode started successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /watch-mode/stop:
    post:
      tags:
        - watch-mode
      operationId: stop-watching
      summary: Stops watching for file changes.
      responses:
        "200":
          description: Watch mode stopped successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  responses:
    InternalServerError:
      description: The server encountered an internal error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotImplementedError:
      description: Not implemented
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ModelCompilationError:
      description: Model compilation error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    ServerStatus:
      type: object
      properties:
        timestamp:
          type: number
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        initialized:
          type: boolean
          description: Whether the server is initialized.

    Project:
      type: object
      properties:
        resource:
          type: string
          description: Resource path to the project.
        name:
          type: string
          description: Project name.
        readme:
          type: string
          description: Project readme.
        location:
          type: string
          description: Project location, it can be an absolute path or an URI (e.g. github, s3, gcs, etc.).
        connections:
          type: array
          items:
            $ref: '#/components/schemas/Connection'
        packages:
          type: array
          items:
            $ref: '#/components/schemas/Package'

    Package:
      type: object
      properties:
        resource:
          type: string
          description: Resource path to the package.
        name:
          type: string
          description: Package name.
        description:
          type: string
          description: Package description.
        location:
          type: string
          description: Package location, it can be an absolute path or an URI (e.g. github, s3, gcs, etc.).

    Model:
      type: object
      description: Malloy Model metadata
      properties:
        resource:
          type: string
          description: Resource path to the model.
        packageName:
          type: string
          description: Model's package Name
        path:
          type: string
          description: Model's relative path in its package directory.
        error:
          type: string
          description: Error message for this model object.

    Notebook:
      type: object
      description: Malloy Notebook metadata
      properties:
        resource:
          type: string
          description: Resource path to the notebook.
        packageName:
          type: string
          description: Notebook's package Name
        path:
          type: string
          description: Notebook's relative path in its package directory.
        error:
          type: string
          description: Error message for this notebook object.

    CompiledNotebook:
      type: object
      description: Malloy notebook def and result data.  Malloy notebook def and result data is Malloy version depdendent.
      properties:
        resource:
          type: string
          description: Resource path to the notebook.
        packageName:
          type: string
          description: Notebook's package Name
        path:
          type: string
          description: Notebook's relative path in its package directory.
        malloyVersion:
          type: string
          description: Version of the Malloy compiler that generated the notebook def and results fields.
        notebookCells:
          type: array
          description: Array of notebook cells.
          items:
            $ref: "#/components/schemas/NotebookCell"

    CompiledModel:
      type: object
      description: Malloy model def and result data.  Malloy model def and result data is Malloy version depdendent.
      properties:
        resource:
          type: string
          description: Resource path to the model.
        packageName:
          type: string
          description: Model's package Name
        path:
          type: string
          description: Model's relative path in its package directory.
        malloyVersion:
          type: string
          description: Version of the Malloy compiler that generated the model def and results fields.
        modelInfo:
          type: string
          description: JSON string of ModelInfo. See malloy/packages/malloy-interfaces/src/types.ts
        sourceInfos:
          type: array
          description: Array of JSON string of SourceInfo. See malloy/packages/malloy-interfaces/src/types.ts
          items:
            type: string
        queries:
          type: array
          descript: Array of named queries.
          items:
            $ref: "#/components/schemas/Query"

    View:
      type: object
      description: Named model view.
      properties:
        name:
          type: string
          description: View's name.
        annotations:
          type: array
          description: Annotations attached to view.
          items:
            type: string

    Query:
      type: object
      description: Named model query.
      properties:
        name:
          type: string
          description: Query's name.
        sourceName:
          type: string
          description: Source name.
        annotations:
          type: array
          description: Annotations attached to query.
          items:
            type: string

    NotebookCell:
      type: object
      description: Notebook cell.
      properties:
        type:
          type: string
          enum: ["markdown", "code"]
          description: Type of notebook cell.
        text:
          type: string
          description: Text contents of the notebook cell.
        result:
          type: string
          description: JSON string of Malloy.Result. See malloy/packages/malloy-interfaces/src/types.ts
        newSources:
          type: array
          description:
            Array of JSON string of SourceInfo made available in the notebook cell. Only *new*
            SourceInfos are returned. The complete list of SourceInfos is available be concatenating the prior
            notebook cells.  The SourceInfos are in the order they are made available in the notebook cell.
          items:
            type: string

    QueryResult:
      type: object
      description: A Malloy query's results.
      properties:
        result:
          type: string
          description: JSON string of Malloy.Result. See malloy/packages/malloy-interfaces/src/types.ts
        resource:
          type: string
          description: Resource path to the query result.

    Database:
      type: object
      description: An in-memory DuckDB database embedded in the package.
      properties:
        resource:
          type: string
          description: Resource path to the database.
        path:
          type: string
          description: Database's relative path in its package directory.
        info:
          $ref: "#/components/schemas/TableDescription"
        type:
          type: string
          enum: ["embedded", "materialized"]
          description: Type of database.

    Schedule:
      type: object
      description: A scheduled task.
      properties:
        resource:
          type: string
          description: Resource in the package that the schedule is attached to.
        schedule:
          type: string
          description: Schedule (cron format) for executing task.
        action:
          type: string
          description: Action to execute.
        connection:
          type: string
          description: Connection to perform action on.
        lastRunTime:
          type: number
          description: Timestamp in milliseconds of the last run.
        lastRunStatus:
          type: string
          description: Status of the last run.

    SchemaName:
      description: A schema name in a Connection.
      type: object
      properties:
        name:
          type: string
          description: Name of the schema
        description:
          type: string
          description: Description of the schema
        isDefault:
          type: boolean
          description: Whether this schema is the default schema
        isHidden:
          type: boolean
          description: Whether this schema is hidden

    Connection:
      type: object
      properties:
        resource:
          type: string
          description: Resource path to the connection.
        name:
          type: string
        type:
          type: string
          enum: [postgres, bigquery, snowflake, trino, mysql]
        attributes:
          $ref: "#/components/schemas/ConnectionAttributes"
        postgresConnection:
          $ref: "#/components/schemas/PostgresConnection"
        bigqueryConnection:
          $ref: "#/components/schemas/BigqueryConnection"
        snowflakeConnection:
          $ref: "#/components/schemas/SnowflakeConnection"
        trinoConnection:
          $ref: "#/components/schemas/TrinoConnection"
        mysqlConnection:
          $ref: "#/components/schemas/MysqlConnection"

    ConnectionAttributes:
      type: object
      properties:
        dialectName:
          type: string
        isPool:
          type: boolean
        canPersist:
          type: boolean
        canStream:
          type: boolean

    PostgresConnection:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
        databaseName:
          type: string
        userName:
          type: string
        password:
          type: string
        connectionString:
          type: string

    MysqlConnection:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
        database:
          type: string
        user:
          type: string
        password:
          type: string

    BigqueryConnection:
      type: object
      properties:
        defaultProjectId:
          type: string
        billingProjectId:
          type: string
        location:
          type: string
        serviceAccountKeyJson:
          type: string
        maximumBytesBilled:
          type: string
        queryTimeoutMilliseconds:
          type: string

    SnowflakeConnection:
      type: object
      properties:
        account:
          type: string
        username:
          type: string
        password:
          type: string
        warehouse:
          type: string
        database:
          type: string
        schema:
          type: string
        responseTimeoutMilliseconds:
          type: integer

    TrinoConnection:
      type: object
      properties:
        server:
          type: string
        port:
          type: number
        catalog:
          type: string
        schema:
          type: string
        user:
          type: string
        password:
          type: string

    SqlSource:
      type: object
      properties:
        resource:
          type: string
          description: Resource path to the sql source.
        # Pass source as an opaque JSON string that is malloyVersion depdendent.
        source:
          type: string

    TableSource:
      type: object
      properties:
        resource:
          type: string
          description: Resource path to the table source.
        # Pass source as an opaque JSON string that is malloyVersion depdendent.
        # TODO: Remove this once we update the Malloy Publisher connection.
        source:
          type: string
        columns:
          description: Table fields
          type: array
          items:
            $ref: "#/components/schemas/Column"

    TemporaryTable:
      type: object
      properties:
        resource:
          type: string
          description: Resource path to the temporary table.
        # Pass table as an opaque JSON string that is malloyVersion depdendent.
        table:
          type: string

    QueryData:
      type: object
      properties:
        resource:
          type: string
          description: Resource path to the query data.
        # Pass result as an opaque JSON string that is malloyVersion depdendent.
        data:
          type: string

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

    Column:
      type: object
      properties:
        name:
          type: string
        type:
          type: string

    TableDescription:
      type: object
      properties:
        name:
          type: string
        rowCount:
          type: integer
        columns:
          type: array
          items:
            $ref: "#/components/schemas/Column"

    WatchStatus:
      type: object
      description: Current watch mode status
      properties:
        enabled:
          type: boolean
          description: Whether watch mode is currently enabled
        projectName:
          type: string
          description: Name of the project being watched
        watchingPath:
          type: string
          nullable: true
          description: The path being watched, null if not watching

    StartWatchRequest:
      type: object
      description: Request to start watching a project
      properties:
        projectName:
          type: string
          description: Name of the project to watch
      required:
        - projectName

    ConnectionStatus:
        type: object
        properties:
          status:
            type: string
            enum: ["ok", "failed"]
          errorMessage:
            type: string
